import { ConditionalExpression } from "../base-expression/conditional.expr";
import { STATE_STATEMENT_ENDED } from "../core";

export let SwitchExpression = function(generateBody, generateCase){
	return class SwitchExpression extends ConditionalExpression {
		/**
		 * 主体表达式
		 * @type {Expression}
		 */
		body = null;

		/**
		 * 是否有 default
		 * @type {Boolean}
		 */
		hasDefault = false;

		/**
		 * 临时变量名
		 * @type {String}
		 */
		variable = "";

		/**
		 * switch 表达式
		 * @param {Context} context - 语法标签上下文
		 * @param {Statements} statements - 当前语句块
		 */
		constructor(context, statements){
			super(context, statements);

			// 如果存在需要编译的生成器
			if(this.contextGeneratorIfNeedCompile){
				// 记录临时变量名
				this.variable = statements.collections.generate();
			}
		};

		/**
		 * 获取表达式主体语句块
		 * @returns {SyntaxTag}
		 */
		get block(){
			return this.body;
		};

		/**
		 * 设置表达式主体语句块
		 * @param {BlockExpression} value - 需要设置的表达式主体语句块
		 * @returns {SyntaxTag}
		 */
		set block(value){
			this.body = value;
		};
		
		/**
		 * 以生成器形式的提取表达式文本内容
		 * @param {ContentBuilder} contentBuilder - 内容生成器
		 * @returns {void}
		 */
		generateTo(contentBuilder){
			let { body: { inner }, variable } = this;

			// 追加临时变量赋值操作
			contentBuilder.appendString(variable + "=new Rexjs.SwitchCondition(");
			// 追加条件，将其作为临时变量名的值
			this.condition.inner.extractTo(contentBuilder);
			// 追加赋值操作语句的分号
			contentBuilder.appendString(");");

			// 以生成器形式编译主体
			generateBody(this, inner, variable, this.contextGeneratorIfNeedCompile, contentBuilder, generateCase);
		};
		
		/**
		 * 以常规形式的提取表达式文本内容
		 * @param {ContentBuilder} contentBuilder - 内容生成器
		 * @returns {void}
		 */
		normalizeTo(contentBuilder){
			// 添加 switch 关键字
			contentBuilder.appendContext(this.context);

			// 提取条件
			this.condition.extractTo(contentBuilder);
			// 提取主体
			this.body.extractTo(contentBuilder);
		};

		/**
		 * 获取状态
		 * @returns {Number}
		 */
		get state(){
			return STATE_STATEMENT_ENDED;
		};

		/**
		 * 设置状态
		 * @param {Number} value - 状态
		 * @returns {Number}
		 */
		set state(value){};
	};
}(
	// generateBody
	(switchExpression, inner, variable, generator, contentBuilder, generateCase) => {
		let { currentIndexString } = generator, mainFlowIndex = generator.nextIndex(), branchFlowIndex = generator.nextIndex();

		// 修改主流索引值为刚刚产生的新索引值
		switchExpression.mainFlowIndex = mainFlowIndex;
		// 设置分支流的索引值，用于 default 表达式使用
		switchExpression.branchFlowIndex = branchFlowIndex;

		// 遍历主体
		for(var i = 0, j = inner.length;i < j;i++){
			// 以生成器形式编译 case 表达式
			generateCase(switchExpression, inner[i], generator, variable, currentIndexString, contentBuilder);
		}

		if(switchExpression.hasDefault){
			// 追加判断，是否进入 default 表达式相关语句块代码
			contentBuilder.appendString(
				currentIndexString  + "=" + variable + ".default()?" + branchFlowIndex + ":" + mainFlowIndex + ";break;"
			);
		}

		// 追加主流索引的 case 表达式
		contentBuilder.appendString("case " + mainFlowIndex + ":");
	},
	// generateCase
	(switchExpression, statement, generator, variable, currentIndexString, contentBuilder) => {
		let { expression } = statement;

		// 如果空表达式，说明没有 case 表达式
		if(expression.empty){
			return;
		}

		let { value } = expression, { positiveIndex, negativeIndex } = switchExpression;

		// 如果是 default 表达式
		if(value.default){
			let { branchFlowIndex } = switchExpression;

			// 追加三元判断的“条件”字符串
			contentBuilder.appendString(
				// 如果已经匹配到值，那么就应该进入 default 表达式对应语句块，否则跳过进入下一项匹配
				currentIndexString + "=" + variable + ".matched?" + branchFlowIndex + ":" + positiveIndex +
				";break;case " + branchFlowIndex + ":"
			);

			// 提取 case 表达式的主体语句块
			expression.statements.extractTo(contentBuilder);

			// 追加三元判断的“不成立”时的相关索引处理
			contentBuilder.appendString(
				currentIndexString + "=" + positiveIndex + ";break;case " + positiveIndex + ":"
			);
		}
		else {
			// 追加三元判断的“条件”字符串
			contentBuilder.appendString(currentIndexString + "=" + variable + ".case(");
			// 追加判断值表达式
			expression.value.extractTo(contentBuilder);

			// 追加 三元判断的执行表达式 与 条件“成立”时相关的 case 表达式字符串
			contentBuilder.appendString(
				")?" + positiveIndex + ":" + negativeIndex + ";break;case " + positiveIndex + ":"
			);

			// 提取 case 表达式的主体语句块
			expression.statements.extractTo(contentBuilder);

			// 追加三元判断的“不成立”时的相关索引处理
			contentBuilder.appendString(
				currentIndexString + "=" + negativeIndex + ";break;case " + negativeIndex + ":"
			);
		}

		// 设置三元判断“成立”时的索引值
		switchExpression.positiveIndex = generator.nextIndex();
		// 设置三元判断“不成立”时的索引值
		switchExpression.negativeIndex = generator.nextIndex();
	}
);