import { OpeningParenTag } from "../paren/paren.opening";
import { PartnerExpression } from "../core";
import { ConditionStatement } from "../base-statement/condition.stmt";
import { ClosingSwitchConditionTag } from "./switch-condition.closing";

export let OpeningSwitchConditionTag = function(closingSwitchConditionTag){
	/**
	 * switch 条件起始标签
	 * @param {Number} _type - 标签类型
	 */
	return class OpeningSwitchConditionTag extends OpeningParenTag {
		/**
		 * 获取绑定的标签，该标签一般是用于语句的 try、catch 的返回值
		 * @returns {SyntaxTag}
		 */
		get binding(){
			return closingSwitchConditionTag;
		};

		/**
		 * 获取此标签接下来所需匹配的标签列表
		 * @param {TagsMap} tagsMap - 标签集合映射
		 * @returns {SyntaxTags}
		 */
		require(tagsMap){
			return tagsMap.expressionTags;
		};

		/**
		 * 标签访问器
		 * @param {SyntaxParser} parser - 语法解析器
		 * @param {Context} context - 标签上下文
		 * @param {Statement} statement - 当前语句
		 * @param {Statements} statements - 当前语句块
		 * @returns {void}
		 */
		visitor(parser, context, statement, statements){
			// 设置条件表达式
			statement.expression.condition = new PartnerExpression(context);
			// 设置当前语句
			statements.statement = new ConditionStatement(statements);
		};
	};
}(
	// closingSwitchConditionTag
	new ClosingSwitchConditionTag()
);