
import { SwitchBodyStatements } from "./switch-body.stmts";
import { SwitchStatement } from "./switch.stmt";
import { ClosingSwitchBodyTag } from "./switch-body.closing";
import { OpeningBlockTag } from "../block/block.opening";

export let OpeningSwitchBodyTag = function(closingSwitchBodyTag){
	/**
	 * switch 主体起始标签
	 * @param {Number} _type - 标签类型
	 */
	return class OpeningSwitchBodyTag extends OpeningBlockTag {
		/**
		 * 获取绑定的标签，该标签一般是用于语句的 try、catch 的返回值
		 * @returns {SyntaxTag}
		 */
		get binding(){
			return closingSwitchBodyTag;
		};

		/**
		 * 获取绑定的语句块，一般在子类使用父类逻辑，而不使用父类语句块的情况下使用
		 * @param {Statements} statements - 当前语句块
		 * @returns {Statements}
		 */
		getBoundStatements(statements){
			return new SwitchBodyStatements(statements);
		};

		/**
		 * 获取此标签接下来所需匹配的标签列表
		 * @param {TagsMap} tagsMap - 标签集合映射
		 * @returns {SyntaxTags}
		 */
		require(tagsMap){
			return tagsMap.openingSwitchBodyContextTags;
		};

		/**
		 * 标签访问器
		 * @param {SyntaxParser} parser - 语法解析器
		 * @param {Context} context - 标签上下文
		 * @param {Statement} statement - 当前语句
		 * @param {Statements} statements - 当前语句块
		 * @returns {void}
		 */
		visitor(parser, context, statement, statements){
			// 调用父类方法
			super.visitor(
				parser,
				context,
				// 设置当前语句
				statements.statement = new SwitchStatement(statements),
				statements
			);
		};
	};
}(
	// closingSwitchBodyTag
	new ClosingSwitchBodyTag()
);