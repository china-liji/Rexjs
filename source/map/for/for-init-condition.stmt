import { ForConditionItemStatement } from "./for-condition-item.stmt";
import { VarExpression } from "../var-declaration/var.expr";
import { ECMAScriptErrors } from "../ecmascript/ecmascript-errors";
import { IdentifierExpression } from "../identifier/identifier.expr";
import { ListExpression } from "../core";

export let ForInitConditionStatement = function(hasError){
	/**
	 * for 循环初始化条件语句
	 * @param {Statements} statements - 该语句将要所处的语句块
	 */
	return class ForInitConditionStatement extends ForConditionItemStatement {
		/**
		 * 捕获处理异常
		 * @param {SyntaxParser} parser - 语法解析器
		 * @param {Context} context - 语法标签上下文
		 * @returns {void}
		 */
		catch(parser, context){
			let tag, { expression, target } = this, openingTag = ForConditionItemStatement.getOpeningTag(this);

			// 判断标签内容
			switch(context.content){
				// 如果是分号
				case ";":
					// 设置标签
					tag = openingTag.forInitConditionSeparator;
					
					(
						// 设置目标语句的表达式
						this.target.expression = new ListExpression(null, ";")
					)
					// 添加表达式
					.add(
						expression
					);
					break;

				// 如果是 in
				case "in":
					tag = openingTag.forIn;

				// 如果是 of
				case "of":
					// 如果验证出错
					if(hasError(parser, expression, context)){
						return;
					}

					// 设置标签
					tag = tag || openingTag.forOf;
					// 设置目标语句的表达式
					this.target.expression = expression;
					break;

				default:
					// 报错
					parser.error(context);
					return;
			}

			// 跳出当前语句
			this.out();
			// 返回标签
			return tag;
		};

		/**
		 * 尝试处理异常
		 * @param {SyntaxParser} parser - 语法解析器
		 * @param {Context} context - 语法标签上下文
		 * @returns {SyntaxTag}
		 */
		try(parser, context){
			// 判断标签内容
			switch(context.content){
				// 如果是 in 关键字
				case "in":
					break;

				// 如果是逗号
				case ",":
					return ForConditionItemStatement.getOpeningTag(this).forInitConditionItemSeparator;

				// 默认
				default:
					return null;
			}

			let { expression } = this;

			// 如果验证出错
			if(hasError(parser, expression, context)){
				return null;
			}

			// 设置目标语句的表达式
			this.target.expression = expression;

			// 跳出当前语句
			this.out();
			return ForConditionItemStatement.getOpeningTag(this).forIn;
		}
	};
}(
	// hasError
	(parser, expression, context) => {
		// 如果是声明表达式
		if(expression instanceof VarExpression){
			let { list } = expression;

			// 如果声明列表长度等于 1
			if(list.length === 1){
				// 设置表达式为列表的第一项
				expression = list[0];
			}
			else {
				// 返回错误信息
				parser.error(context, ECMAScriptErrors.FOR_IN);
				return true;
			}
		}

		// 如果是标识符表达式
		if(expression instanceof IdentifierExpression){
			return false;
		}

		// 返回错误信息
		parser.error(context, ECMAScriptErrors.FOR);
		return true;
	}
);