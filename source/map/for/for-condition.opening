import { OpeningParenTag } from "../paren/paren.opening";
import { PartnerExpression } from "../core";
import { ForInitConditionStatement } from "./for-init-condition.stmt";
import { ConditionStatement } from "../base-statement/condition.stmt";
import { ForInTag } from "./for-in.tag";
import { ForInitConditionItemSeparatorTag } from "./for-init-condition-item-separator.tag";
import { ClosingForConditionTag } from "./for-condition.closing";
import { ForInitConditionSeparatorTag } from "./for-init-condition-separator.tag";
import { ForLogicConditionSeparatorTag } from "./for-logic-condition-separator.tag";
import { ForOfTag } from "./for-of.tag";

export let OpeningForConditionTag = function(closingForConditionTag, forInitConditionItemSeparatorTag, forInitConditionSeparatorTag, forLogicConditionSeparatorTag, forInTag, forOfTag){
	/**
	 * for 条件起始标签
	 * @param {Number} _type - 标签类型
	 */
	return class OpeningForConditionTag extends OpeningParenTag {
		/**
		 * 获取绑定的标签，该标签一般是用于语句的 try、catch 的返回值
		 * @returns {SyntaxTag}
		 */
		get binding(){
			return closingForConditionTag;
		};

		/**
		 * 获取绑定的 forInTag 标签，该标签一般是用于语句的 try、catch 的返回值
		 * @returns {SyntaxTag}
		 */
		get forIn(){
			return forInTag;
		};

		/**
		 * 获取绑定的 forInitConditionItemSeparatorTag 标签，该标签一般是用于语句的 try、catch 的返回值
		 * @returns {SyntaxTag}
		 */
		get forInitConditionItemSeparator(){
			return forInitConditionItemSeparatorTag;
		};

		/**
		 * 获取绑定的 forInitConditionSeparatorTag 标签，该标签一般是用于语句的 try、catch 的返回值
		 * @returns {SyntaxTag}
		 */
		get forInitConditionSeparator(){
			return forInitConditionSeparatorTag;
		};

		/**
		 * 获取绑定的 forLogicConditionSeparatorTag 标签，该标签一般是用于语句的 try、catch 的返回值
		 * @returns {SyntaxTag}
		 */
		get forLogicConditionSeparator(){
			return forLogicConditionSeparatorTag;
		};

		/**
		 * 获取绑定的 forOfTag 标签，该标签一般是用于语句的 try、catch 的返回值
		 * @returns {SyntaxTag}
		 */
		get forOf(){
			return forOfTag;
		};

		/**
		 * 获取此标签接下来所需匹配的标签列表
		 * @param {TagsMap} tagsMap - 标签集合映射
		 * @returns {SyntaxTags}
		 */
		require(tagsMap){
			return tagsMap.forConditionContextTags;
		};

		/**
		 * 标签访问器
		 * @param {SyntaxParser} parser - 语法解析器
		 * @param {Context} context - 标签上下文
		 * @param {Statement} statement - 当前语句
		 * @param {Statements} statements - 当前语句块
		 * @returns {void}
		 */
		visitor(parser, context, statement, statements){
			// 设置 for 表达式的条件
			statement.expression.condition = new PartnerExpression(context);
			// 设置当前语句
			statements.statement = new ConditionStatement(statements);
			// 再次设置当前语句，目的是 target 要指向 ConditionStatement
			statements.statement = new ForInitConditionStatement(statements);
		};
	};
}(
	// closingForConditionTag
	new ClosingForConditionTag(),
	// forInitConditionItemSeparatorTag
	new ForInitConditionItemSeparatorTag(),
	// forInitConditionSeparatorTag
	new ForInitConditionSeparatorTag(),
	// forLogicConditionSeparatorTag
	new ForLogicConditionSeparatorTag(),
	// forInTag
	new ForInTag(),
	// forOfTag
	new ForOfTag()
);