import { OpeningWhileConditionTag } from "./while-condition.opening";
import { PartnerExpression } from "../core";
import { ConditionStatement } from "../base-statement/condition.stmt";
import { ClosingDoWhileConditionTag } from "./do-while-condition.closing";

export let OpeningDoWhileConditionTag = function(closingDoWhileConditionTag){
	/**
	 * do while 条件起始标签
	 * @param {Number} _type - 标签类型
	 */
	return class OpeningDoWhileConditionTag extends OpeningWhileConditionTag {
		/**
		 * 获取绑定的标签，该标签一般是用于语句的 try、catch 的返回值
		 * @returns {SyntaxTag}
		 */
		get binding(){
			return closingDoWhileConditionTag;
		};

		/**
		 * 标签访问器
		 * @param {SyntaxParser} parser - 语法解析器
		 * @param {Context} context - 标签上下文
		 * @param {Statement} statement - 当前语句
		 * @param {Statements} statements - 当前语句块
		 * @returns {void}
		 */
		visitor(parser, context, statement, statements){
			// 设置 do while 表达式的条件
			statement.expression.condition = new PartnerExpression(context);
			// 设置当前语句
			statements.statement = new ConditionStatement(statements);
		};
	};
}(
	// closingDoWhileConditionTag
	new ClosingDoWhileConditionTag()
);