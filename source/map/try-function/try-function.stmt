import { UnaryStatement } from "../unary-operator/unary.stmt";
import { CallExpression } from "../call/call.expr";
import { FunctionConvertorExpression } from "./function-convertor.expr";

export let TryFunctionStatement = function(setOperand){
	/**
	 * 尝试执行函数语句
	 * @param {Statements} statements - 该语句将要所处的语句块
	 */
	return class TryFunctionStatement extends UnaryStatement {
		/**
		 * 捕获处理异常
		 * @param {SyntaxParser} parser - 语法解析器
		 * @param {Context} context - 语法标签上下文
		 * @returns {SyntaxTag}
		 */
		catch(){
			// 设置 operand
			setOperand(this, this.expression);
		};

		/**
		 * 尝试处理异常
		 * @param {SyntaxParser} parser - 语法解析器
		 * @param {Context} context - 语法标签上下文
		 * @returns {SyntaxTag}
		 */
		try(parser, context){
			let { expression } = this;

			// 如果一元标签验证该标签为表达式分隔符标签
			if(this.target.expression.context.tag.isSeparator(context, expression)){
				// 设置 operand
				setOperand(this, expression);
			}
		};
	};
}(
	// setOperand
	(statement, expression) => {
		// 如果是函数调用表达式
		if(expression instanceof CallExpression){
			// 将函数调用表达式的操作对象设置为 函数转换器表达式
			expression.operand = new FunctionConvertorExpression(expression.operand);
		}
		else {
			// 直接设置表达式为 函数转换器表达式
			expression = new FunctionConvertorExpression(expression);
			// 并告知函数转换器表达式，并没有被手动调用
			expression.called = false;
		}

		// 设置操作对象
		statement.out().operand = expression;
	}
);