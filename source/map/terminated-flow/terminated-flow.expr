import { GenerableExpression } from "../base-expression/generable.expr";
import { STATE_STATEMENT_ENDED, EmptyExpression } from "../core";

export let TerminatedFlowExpression = function(){
	/**
	 * 中断流表达式
	 * @param {Context} context - 语法标签上下文
	 * @param {Statements} statements - 当前语句块
	 */
	return class TerminatedFlowExpression extends GenerableExpression {
		/**
		 * 中断的对象
		 * @type {Expression}
		 */
		object = null;
		
		/**
		 * 以生成器形式的提取表达式文本内容
		 * @param {ContentBuilder} contentBuilder - 内容生成器
		 * @returns {void}
		 */
		generateTo(contentBuilder){
			let { context: { tag }, contextGeneratorIfNeedCompile: generator } = this;

			// 追加设置生成器索引的字符串
			contentBuilder.appendString(
				generator.currentIndexString + "=" + tag.getCurrentIndexBy(generator, this) + ";"
			);

			// 以常规形式的提取表达式文本内容
			this.normalizeTo(contentBuilder);
			// 追加分号
			contentBuilder.appendString(";");
			
			// 由于上面设置了分号，表示语句已经结束，不需要再添加分号
			this.state = STATE_STATEMENT_ENDED;

			// 追加 case 表达式字符串
			contentBuilder.appendString("case " + tag.getNextIndexBy(generator, this) + ":");
		};
		
		/**
		 * 以常规形式的提取表达式文本内容
		 * @param {ContentBuilder} contentBuilder - 内容生成器
		 * @returns {void}
		 */
		normalizeTo(contentBuilder){
			let { object } = this;

			// 追加关键字
			contentBuilder.appendContext(this.context);

			// 如果是空表达式
			if(object instanceof EmptyExpression){
				return;
			}

			// 追加空格
			contentBuilder.appendSpace();
			// 提取对象
			object.extractTo(contentBuilder);
		}
	}
}();