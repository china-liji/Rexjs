import { ConditionalExpression } from "../base-expression/conditional.expr";
import { STATE_STATEMENT_ENDED } from "../core";

export let DoExpression = function(){
	/**
	 * do 表达式
	 * @param {Context} context - 语法标签上下文
	 * @param {Statements} statements - 当前语句块
	 */
	return class DoExpression extends ConditionalExpression {
		/**
		 * 主体表达式
		 * @type {Expression}
		 */
		body = null;

		/**
		 * while 关键字上下文
		 * @type {Context}
		 */
		whileContext = null;

		/**
		 * 以生成器形式的提取表达式文本内容
		 * @param {ContentBuilder} contentBuilder - 内容生成器
		 * @returns {void}
		 */
		generateTo(contentBuilder){
			this.adapterIndex = this.mainFlowIndex;

			// 以生成器形式编译主体
			this.generateBodyTo(this.body, contentBuilder, true);
			// 以生成器形式编译逻辑条件
			this.generateConditionTo(this.condition.inner, contentBuilder);
		};

		/**
		 * 提取表达式文本内容
		 * @param {ContentBuilder} contentBuilder - 内容存储列表
		 * @returns {void}
		 */
		normalizeTo(contentBuilder){
			let { body } = this;
			
			// 追加 do 关键字
			contentBuilder.appendContext(this.context);
			// 追加空格
			contentBuilder.appendSpace();
			
			// 提取主体
			body.extractTo(contentBuilder);
			
			// 判断 do while 主体表达式是否需要加分号
			if((body.state & STATE_STATEMENT_ENDED) !== STATE_STATEMENT_ENDED){
				// 追加分号
				contentBuilder.appendString(";");
			}
			
			// 追加 while 关键字
			contentBuilder.appendContext(this.whileContext);
			// 提取 while 条件
			this.condition.extractTo(contentBuilder);
		};

		/**
		 * 获取状态
		 * @returns {Number}
		 */
		get state(){
			return STATE_STATEMENT_ENDED;
		};

		/**
		 * 设置状态
		 * @param {Number} state - 表达式状态
		 * @returns {Number}
		 */
		set state(state){};
	};
}();